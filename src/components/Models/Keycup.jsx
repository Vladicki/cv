/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 keycup.glb 
*/

// MATERIAL setup
// Phong - good for realistic colors 
// const phongMaterial = new THREE.MeshPhongMaterial({ color:'#d90429'})
// material = { phongMaterial }


import * as THREE from 'three'
import React, { forwardRef, useMemo, useState, useEffect, useRef } from 'react'
import { useCursor, useGLTF, useAnimations } from '@react-three/drei'
import { Decal, Float, OrbitControls, Preload, useTexture } from '@react-three/drei'

export const Keycup = React.forwardRef(function Keycup(props, ref) {
    const color = props.color || '#ffffff'
    const { imgURL, setTechDescription, text, ...restProps } = props; // Note: color and techDesc are already pulled out above
    const techDesc = props.techDesc || " "
    const [decalTexture] = useTexture([props.imgURL])
    const { nodes, materials, animations } = useGLTF('models/keycup.glb')

    // Get actions from useAnimations hook
    // You typically pass the group or mesh containing the animated parts
    const groupRef = useRef(); // Create a local ref for the group

    // const group = React.useRef()

    const { actions, mixer } = useAnimations(animations, groupRef);
    // const { actions } = useAnimations(animations, group)


    const [hovered, hover] = useState(false)
    const [clicked, click] = useState(false)
    // Create the material once when the color changes
    useCursor(hovered)
    const lambertMaterial = useMemo(
        () => new THREE.MeshLambertMaterial({ color }),
        [color]
    )

    // Optional: Log available animations to find their names
    useEffect(() => {
        console.log({ text })
        console.log(`Keycup (Ref:`, ref.current);
        if (actions) {
            console.log("Available animations for Keycup:", Object.keys(actions));
            // For example, if your animation is named "press", it will show up here.
            // If you want to play a default animation on load, you could do it here:
            // actions.Idle?.play(); // Play an "Idle" animation if it exists
        }
    }, [actions]); // Rerun when actions are available


    // mater<meshLambertMaterial color="#68585" emissive="#468585" />
    return (
        <group {...props} dispose={null}>
            <Float speed={1.75} rotationIntensity={4} floatIntensity={3}>
                <mesh geometry={nodes.Cube001.geometry}
                    ref={ref}
                    material={lambertMaterial}
                    scale={clicked ? [1.5, 0.73, 1.5] : [1.233, 0.73, 1.233]}
                    // onClick={() => click(!clicked) && console.log(ref.current)}
                    onClick={() => console.log()}
                    onPointerOver={() => { hover(true), setTechDescription(techDesc) }}
                    onPointerOut={() => { hover(false), setTechDescription(" ") }}
                >
                    <Decal
                        //fixed bleed through
                        transparent
                        depthTest={true}
                        depthWrite={true}
                        // debug // Makes "bounding box" of the decal visible
                        position={[0, 0.9, 0]}     // adjust decal position (y+ is up)
                        rotation={[Math.PI / 2, Math.PI, 0,]}         // adjust decal rotation
                        scale={1}                  // adjust decal size
                        polygonOffset
                        polygonOffsetFactor={-4}
                        map={decalTexture}
                        flatShading
                    />


                </mesh>
            </Float>
        </group >
    )
})

useGLTF.preload('models/keycup.glb')
