/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 keycup.glb
*/

// MATERIAL setup
// Phong - good for realistic colors
// const phongMaterial = new THREE.MeshPhongMaterial({ color:'#d90429'})
// material = { phongMaterial }


import * as THREE from 'three'
import React, { forwardRef, useMemo, useState, useEffect, useRef } from 'react'
import { useCursor, useGLTF, useAnimations } from '@react-three/drei'
import { Decal, Float, OrbitControls, Preload, useTexture } from '@react-three/drei'

// NEW: Accept float parameters as props with default values
export const Keycup = React.forwardRef(function Keycup({
    pointerOutTimeoutRef,
    floatSpeed = 0,         // Default value
    floatRotationIntensity = 0, // Default value
    floatFloatIntensity = 0,    // Default value
    ...props
}, ref) {
    const color = props.color || '#ffffff'
    const { imgURL, setTechDescription, text, ...restProps } = props;
    const techDesc = props.techDesc || " "
    const [decalTexture] = useTexture([props.imgURL])
    const { nodes, materials, animations } = useGLTF('models/keycup.glb')

    // Get actions from useAnimations hook
    const groupRef = useRef();

    const { actions, mixer } = useAnimations(animations, groupRef);

    const [hovered, hover] = useState(false)
    const [clicked, click] = useState(false)
    // Create the material once when the color changes
    useCursor(hovered)
    const lambertMaterial = useMemo(
        () => new THREE.MeshLambertMaterial({ color }),
        [color]
    )

    // Optional: Log available animations to find their names
    useEffect(() => {
        console.log({ text })
        console.log(`Keycup (Ref:`, ref.current);
        if (actions) {
            console.log("Available animations for Keycup:", Object.keys(actions));
        }
    }, [actions]);

    // Cleanup the timeout on unmount
    useEffect(() => {
        return () => {
            if (pointerOutTimeoutRef.current) {
                clearTimeout(pointerOutTimeoutRef.current);
            }
        };
    }, [pointerOutTimeoutRef]);


    // Define new pointer handlers
    const handlePointerOver = () => {
        // Clear the previous timeout if it exists
        if (pointerOutTimeoutRef.current) {
            clearTimeout(pointerOutTimeoutRef.current);
            pointerOutTimeoutRef.current = null;
        }
        hover(true);
        setTechDescription(techDesc);
    };

    const handlePointerOut = () => {
        hover(false);
        // Schedule the text to be cleared after 2 seconds
        pointerOutTimeoutRef.current = setTimeout(() => {
            setTechDescription("");
        }, 2000);
    };

    return (
        <group {...props} dispose={null}>
            {/* NEW: Pass the float parameters as props */}
            <Float
                speed={floatSpeed}
                rotationIntensity={floatRotationIntensity}
                floatIntensity={floatFloatIntensity}
            >
                <mesh geometry={nodes.Cube001.geometry}
                    ref={ref}
                    material={lambertMaterial}
                    scale={clicked ? [1.5, 0.73, 1.5] : [1.233, 0.73, 1.233]}
                    onClick={() => console.log()}
                    onPointerOver={handlePointerOver}
                    onPointerOut={handlePointerOut}
                >
                    <Decal
                        transparent
                        depthTest={true}
                        depthWrite={true}
                        position={[0, 0.9, 0]}
                        rotation={[Math.PI / 2, Math.PI, 0,]}
                        scale={1}
                        polygonOffset
                        polygonOffsetFactor={-4}
                        map={decalTexture}
                        flatShading
                    />
                </mesh>
            </Float>
        </group >
    )
})

useGLTF.preload('models/keycup.glb')
