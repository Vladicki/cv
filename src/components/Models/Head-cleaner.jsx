/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 head-cleaner.glb
*/

import React, { useState, useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { Decal, useTexture } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import * as THREE from 'three'; // Import Three.js for Vector2, Vector3, Quaternion, Euler, MathUtils

export function Head(props) {
    const { nodes, materials } = useGLTF('/models/head-cleaner.glb');
    const decalTexture = useTexture('/models/eyes_closed.png');

    // State to track if the mouse button is currently held down on the mesh
    const [isHolding, setIsHolding] = useState(false);
    // State to track if the decal is currently in a blinking phase
    const [isBlinking, setIsBlinking] = useState(false);

    // --- Opacity Values ---
    const openEyes = 0;
    const closedEyes = 1;

    // Ref to store the timeout ID for blinking
    const blinkTimeoutRef = useRef(null);
    // Ref for the head group/mesh itself to apply rotation
    const headRef = useRef();

    // Store mouse position (normalized device coordinates: -1 to 1)
    const mouse = useRef(new THREE.Vector2());






    // --- Blinking Effect (unchanged from previous working version) ---
    useEffect(() => {
        const scheduleBlink = () => {
            const randomDelay = Math.random() * (10000 - 7000) + 7000; // 7 to 10 seconds

            blinkTimeoutRef.current = setTimeout(() => {
                setIsBlinking(true);
                setTimeout(() => {
                    setIsBlinking(false);
                    scheduleBlink();
                }, 500); // 0.5 seconds blink duration
            }, randomDelay);
        };

        scheduleBlink();

        return () => {
            if (blinkTimeoutRef.current) {
                clearTimeout(blinkTimeoutRef.current);
            }
        };
    }, []);

    // --- Opacity Calculation (unchanged from previous working version) ---
    const currentDecalOpacity = isBlinking
        ? closedEyes
        : isHolding
            ? closedEyes
            : openEyes;

    // --- Pointer Handlers (unchanged from previous working version) ---
    const handlePointerDown = () => {
        setIsHolding(true);
    };

    const handlePointerUp = () => {
        setIsHolding(false);
    };

    return (
        <group {...props} dispose={null} ref={headRef}>
            <mesh
                geometry={nodes.FBHead.geometry}
                material={materials.chat}
                onPointerDown={handlePointerDown}
                onPointerUp={handlePointerUp}
            >
                <Decal
                    transparent
                    depthTest={true}
                    depthWrite={true}
                    // debug // Uncomment for debugging decal position/size
                    position={[-0.01, 0.36, 1]}
                    rotation={[Math.PI, Math.PI, Math.PI]}
                    scale={[1.2, 0.32, 1]}
                    polygonOffset
                    polygonOffsetFactor={-4}
                    map={decalTexture}
                >
                    <meshBasicMaterial
                        map={decalTexture}
                        transparent={true}
                        opacity={currentDecalOpacity}
                        polygonOffset={true}
                        polygonOffsetFactor={-4}
                    />
                </Decal>
            </mesh>
        </group>
    );
}

useGLTF.preload('/models/head-cleaner.glb');
