/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 head-cleaner.glb
*/

import React, { useState } from 'react'; // Import useState
import { useGLTF } from '@react-three/drei';
import { Decal, useTexture } from '@react-three/drei'; // Removed Float, Preload as they're not used here

export function Head(props) {
    const { nodes, materials } = useGLTF('/models/head-cleaner.glb');
    const decalTexture = useTexture('/models/eyes_closed.png');

    // State to control decal visibility/opacity
    const [decalOpacity, setDecalOpacity] = useState(1); // 1 for fully opaque, 0 for fully transparent
    const [showDecal, setShowDecal] = useState(true); // Control rendering the Decal component

    // Function to handle the mesh click
    const handleMeshClick = () => {
        // Toggle the visibility (and effectively opacity)
        if (showDecal) {
            // If currently visible, hide it
            setDecalOpacity(0);
            setShowDecal(false);
        } else {
            // If currently hidden, show it
            setDecalOpacity(1);
            setShowDecal(true);
        }
    };

    return (
        <group {...props} dispose={null}>
            <mesh
                geometry={nodes.FBHead.geometry}
                material={materials.chat}
                onClick={handleMeshClick} // Attach the click handler here
            >
                {/* Conditionally render Decal based on showDecal state */}
                {showDecal && (
                    <Decal
                        transparent // Essential for opacity to work
                        depthTest={true}
                        depthWrite={true}
                        // debug // Makes "bounding box" of the decal visible
                        position={[-0.01, 0.36, 1]} // adjust decal position (y+ is up)
                        rotation={[Math.PI, Math.PI, Math.PI]} // adjust decal rotation
                        scale={[1.2, .4, 1]} // adjust decal size
                        polygonOffset
                        polygonOffsetFactor={-4}
                        map={decalTexture}
                    >
                        {/* This is where you apply the opacity */}
                        <meshBasicMaterial
                            map={decalTexture}
                            transparent={true} // Must be true for opacity to take effect
                            opacity={decalOpacity}
                            polygonOffset={true} // Inherit polygonOffset from parent Decal
                            polygonOffsetFactor={-4} // Inherit polygonOffsetFactor from parent Decal
                        />
                    </Decal>
                )}
            </mesh>
        </group>
    );
}

useGLTF.preload('/models/head-cleaner.glb');
